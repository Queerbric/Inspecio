plugins {
	id 'org.quiltmc.loom' version '1.3.+'
	id 'java-library'
	id 'maven-publish'
	id 'org.quiltmc.gradle.licenser' version '2.0.+'
	id 'com.modrinth.minotaur' version '2.+'
	id 'com.matthewprenger.cursegradle' version '1.4.+'
}

group = project.maven_group
version = "${project.mod_version}+${getMCVersionString()}"
base.archivesName = project.archives_base_name

def targetJavaVersion = 17

boolean isMCVersionNonRelease() {
	return project.minecraft_version.matches('^\\d\\dw\\d\\d[a-z]$')
			|| project.minecraft_version.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}

String getMCVersionString() {
	return project.minecraft_version
}

String parseReadme() {
	def linkRegex = /!\[([A-z_ ]+)]\((images\/[A-z.\/_]+)\)/

	def readme = (String) file('README.md').text
	readme = readme.replaceAll(linkRegex, '![$1](https://raw.githubusercontent.com/Queerbric/Inspecio/1.19/$2)')
	return readme
}

String fetchChangelog() {
	def changelogText = file('CHANGELOG.md').text
	def regexVersion = ((String) project.mod_version).replaceAll('\\.', /\\./).replaceAll('\\+', '\\+')
	def changelogRegex = ~"###? ${regexVersion}\\n\\n(( *- .+\\n)+)"
	def matcher = changelogText =~ changelogRegex

	if (matcher.find()) {
		String changelogContent = matcher.group(1)

		def changelogLines = changelogText.split('\n')
		def linkRefRegex = ~'^\\[([A-z0-9 _\\-/+.]+)]: '
		for (int i = changelogLines.length - 1; i > 0; i--) {
			def line = changelogLines[i]
			if ((line =~ linkRefRegex).find())
				changelogContent += '\n' + line
			else break
		}

		return changelogContent
	} else {
		return null
	}
}

repositories {
	maven {
		name 'TerraformersMC'
		url 'https://maven.terraformersmc.com/releases'
		content {
			includeGroup 'com.terraformersmc'
		}
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "org.quiltmc:quilt-mappings:${minecraft_version}+build.${project.quilt_mappings}:intermediary-v2"
	modImplementation "org.quiltmc:quilt-loader:${project.loader_version}"

	modImplementation include("org.quiltmc.qsl.core:crash_info:${project.qsl_version}+${project.minecraft_version}")
	modImplementation include("org.quiltmc.qsl.core:resource_loader:${project.qsl_version}+${project.minecraft_version}")
	modImplementation include("org.quiltmc.qsl.management:client_command:${project.qsl_version}+${project.minecraft_version}")
	include("org.quiltmc.qsl.core:qsl_base:${project.qsl_version}+${project.minecraft_version}")
	include("org.quiltmc.qsl.core:lifecycle_events:${project.qsl_version}+${project.minecraft_version}")
	modImplementation include("org.quiltmc.qsl.data:tags:${project.qsl_version}+${project.minecraft_version}")
	modImplementation include("org.quiltmc.qsl.gui:tooltip:${project.qsl_version}+${project.minecraft_version}")

	// Only for ModMenu
	/*modLocalRuntime("com.terraformersmc:modmenu:3.1.0") {
		transitive = false
	}*/
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'

	it.options.release.set(targetJavaVersion)
}

processResources {
	inputs.property 'version', project.version

	filesMatching('quilt.mod.json') {
		expand 'version': project.version
	}
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}

license {
	rule file('HEADER')
	include '**/*.java'
}

modrinth {
	projectId = project.modrinth_id
	versionName = "Inspecio ${project.mod_version} (${getMCVersionString()})"
	gameVersions = [project.minecraft_version]
	loaders = ["quilt"]
	versionType = isMCVersionNonRelease() ? "beta" : "release"
	uploadFile = tasks.remapJar
	syncBodyFrom = parseReadme()

	// Changelog fetching
	def changelogContent = fetchChangelog()

	if (changelogContent) {
		changelog = changelogContent
	} else {
		afterEvaluate {
			tasks.modrinth.setEnabled(false)
		}
	}
}
tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

curseforge {
	if (System.getenv("CURSEFORGE_TOKEN")) {
		apiKey = System.getenv("CURSEFORGE_TOKEN")
	}

	project {
		id = project.curseforge_id
		releaseType = isMCVersionNonRelease() ? "beta" : "release"
		addGameVersion project.minecraft_version
		addGameVersion "Quilt"
		addGameVersion "Java 17"
		addGameVersion "Java 18"

		// Changelog fetching
		def changelogContent = fetchChangelog()

		if (changelogContent) {
			changelogType = 'markdown'
			changelog = 'Changelog:\n\n' + changelogContent
		} else {
			afterEvaluate {
				uploadTask.setEnabled(false)
			}
		}

		mainArtifact(remapJar) {
			displayName = "Inspecio ${project.mod_version} (${getMCVersionString()})"

			relations {
				embeddedLibrary 'qsl'
			}
		}

		afterEvaluate {
			uploadTask.setGroup('publishing')
			uploadTask.dependsOn("remapJar")
		}
	}
}
tasks.curseforge.setGroup('publishing')

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
	}
}